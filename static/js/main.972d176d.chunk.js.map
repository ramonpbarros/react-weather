{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","forecast","setForecast","image","setImage","convertDate","dateVar","replace","className","main","temp","results","style","opacity","src","urls","regular","alt","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","list","dt_txt","split","icon","humidity","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.972d176d.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n  key:\"b0105367c10a309df73fedf0f8b8f403\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\nconst secret_key = \"GBZIvsNHDMoO8ghj5neW-nOlNdZaCHtBdOBsJp7ZK_M\"\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [image, setImage] = useState({});\n\n  const search = event => {\n    if(event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n        });\n\n      fetch(`${api.base}forecast?q=${query}&units=imperial&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setForecast(result);\n        });\n\n      fetch(`https://api.unsplash.com/search/photos/?client_id=${secret_key}&orientation=portrait&query=${query}`)\n        .then(res => res.json())\n        .then(result => {\n          setImage(result);\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  const convertDate = (dateVar) => {\n    dateVar = dateVar.replace(/(....).(..).(..)/, \"$2/$3/$1\");\n    return dateVar;\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 100) ? 'app warm': 'app') : 'app'}>\n          {(typeof image.results != \"undefined\") ? (\n            <div className=\"background\" style={{opacity: \"60%\"}}>\n              <img src={image.results[1].urls.regular} alt=\"\" className=\"image\"></img>\n            </div>\n          ) : ('')}\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}˚f\n              </div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : ('')}\n        {(typeof forecast.list != \"undefined\") ? (\n          <div>\n            <div className=\"forecast-box\">\n              <div className=\"forecast\">\n                <div className=\"\">{convertDate((forecast.list[2].dt_txt).split(\" \")[0])}</div>\n                <img src={`https://openweathermap.org/img/wn/${forecast.list[2].weather[0].icon}.png`} alt=\"\"></img>\n                <p>Temp: {Math.round(forecast.list[2].main.temp)}˚f</p>\n                <p>Humidity: {forecast.list[2].main.humidity}%</p>\n              </div>  \n              <div className=\"forecast\">\n                <div className=\"\">{convertDate((forecast.list[10].dt_txt).split(\" \")[0])}</div>\n                <img src={`https://openweathermap.org/img/wn/${forecast.list[10].weather[0].icon}.png`} alt=\"\" id=\"imgForecast0\"></img>\n                <p>Temp: {Math.round(forecast.list[10].main.temp)}˚f</p>\n                <p>Humidity: {forecast.list[10].main.humidity}%</p>\n              </div>  \n              <div className=\"forecast\">\n                <div className=\"\">{convertDate((forecast.list[18].dt_txt).split(\" \")[0])}</div>\n                <img src={`https://openweathermap.org/img/wn/${forecast.list[18].weather[0].icon}.png`} alt=\"\" id=\"imgForecast0\"></img>\n                <p>Temp: {Math.round(forecast.list[18].main.temp)}˚f</p>\n                <p>Humidity: {forecast.list[18].main.humidity}%</p>\n              </div>  \n              <div className=\"forecast\">\n                <div className=\"\">{convertDate((forecast.list[26].dt_txt).split(\" \")[0])}</div>\n                <img src={`https://openweathermap.org/img/wn/${forecast.list[26].weather[0].icon}.png`} alt=\"\" id=\"imgForecast0\"></img>\n                <p>Temp: {Math.round(forecast.list[26].main.temp)}˚f</p>\n                <p>Humidity: {forecast.list[26].main.humidity}%</p>\n              </div>  \n              <div className=\"forecast\">\n              <div className=\"\">{convertDate((forecast.list[34].dt_txt).split(\" \")[0])}</div>\n                <img src={`https://openweathermap.org/img/wn/${forecast.list[34].weather[0].icon}.png`} alt=\"\" id=\"imgForecast0\"></img>\n                <p>Temp: {Math.round(forecast.list[34].main.temp)}˚f</p>\n                <p>Humidity: {forecast.list[34].main.humidity}%</p>\n              </div>  \n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}